import xml.etree.ElementTree as ET
import json
import os

# --- SIMULACIÓN DE LLM ---
SIMULATED_LLM_KNOWLEDGE_BASE = {
    "80/tcp": {
        "service_name": "http",
        "common_vulnerabilities": ["XSS", "SQLi", "Directory Traversal", "Outdated server"],
        "pentest_steps": ["Directory busting", "Check CMS vulns", "Test XSS", "Test SQLi"],
        "questions_for_llm": ["Common exploits for Apache X.Y.Z?"]
    },
    "443/tcp": {
        "service_name": "https",
        "common_vulnerabilities": ["SSL/TLS misconfigs", "Web app vulns"],
        "pentest_steps": ["SSLScan/TestSSL.sh", "Verify certificate"],
        "questions_for_llm": ["Risks of TLS 1.0?"]
    },
    "22/tcp": {
        "service_name": "ssh",
        "common_vulnerabilities": ["Weak passwords", "Default creds", "Outdated SSH"],
        "pentest_steps": ["Brute-force (hydra)", "Check SSH version vulns"],
        "questions_for_llm": ["Common SSH usernames?"]
    },
    "21/tcp": {
        "service_name": "ftp",
        "common_vulnerabilities": ["Anonymous FTP", "Weak passwords", "Outdated FTP server"],
        "pentest_steps": ["Check anonymous FTP", "FTP brute-force"],
        "questions_for_llm": ["Risks of anonymous FTP?"]
    },
    "default": {
        "pentest_steps": ["Research service/version for vulns", "Check Exploit-DB/CVE"],
        "questions_for_llm": ["Common vulns for service X version Y?"]
    }
}

def simulated_llm_call(prompt_type, service_info, port_id):
    # print(f"\n--- Consulta Simulada al LLM (Tipo: {prompt_type}) ---")
    # print(f"Servicio: {service_info.get('name', 'N/A')}@{port_id}, Versión: {service_info.get('version', 'N/A')}")
    data_for_key = SIMULATED_LLM_KNOWLEDGE_BASE.get(port_id, SIMULATED_LLM_KNOWLEDGE_BASE["default"])

    response = {}
    if prompt_type == "summarize_service":
        response["summary"] = f"El servicio {service_info.get('name', 'desconocido')} ({port_id}, v: {service_info.get('version', 'N/A')}) es para {data_for_key.get('service_name', 'varias funciones')}."
        response["potential_vulnerabilities"] = data_for_key.get('common_vulnerabilities', [])
    elif prompt_type == "suggest_pentest_steps":
        response["recommended_steps"] = data_for_key.get('pentest_steps', [])
    elif prompt_type == "generate_questions":
        response["follow_up_questions"] = data_for_key.get('questions_for_llm', [])
    return response

# --- FIN DE SIMULACIÓN DE LLM ---

def parse_nmap_xml(xml_string):
    try:
        root = ET.fromstring(xml_string)
    except ET.ParseError as e:
        print(f"Error parseando XML: {e}")
        return []

    hosts_data = []
    for host_tag in root.findall('host'):
        host_info = {"ip": "", "ports": []}
        address_tag = host_tag.find("address[@addrtype='ipv4']")
        if address_tag is not None:
            host_info["ip"] = address_tag.get('addr')

        ports_tag = host_tag.find('ports')
        if ports_tag is not None:
            for port_tag in ports_tag.findall('port'):
                port_id = f"{port_tag.get('portid')}/{port_tag.get('protocol')}"
                service_tag = port_tag.find('service')
                service_info = {
                    "name": service_tag.get('name') if service_tag is not None else "unknown",
                    "product": service_tag.get('product') if service_tag is not None else "",
                    "version": service_tag.get('version') if service_tag is not None else "",
                    "state": port_tag.find('state').get('state') if port_tag.find('state') is not None else "unknown"
                }
                if service_info["state"] == "open":
                    host_info["ports"].append({"id": port_id, "service": service_info})

        if host_info["ip"] and host_info["ports"]:
            hosts_data.append(host_info)
    return hosts_data

def generate_analysis_report(hosts_data):
    report_lines = []
    for host in hosts_data:
        report_lines.append(f"Análisis para el Host: {host['ip']}")
        report_lines.append("=" * 30)
        if not host["ports"]:
            report_lines.append("No se encontraron puertos abiertos.")
            report_lines.append("") # Añadir espacio
            continue

        for port_info in host["ports"]:
            port_id = port_info["id"]
            service = port_info["service"]

            report_lines.append(f"  Puerto: {port_id} ({service.get('name', 'N/A')})")
            report_lines.append(f"  Producto: {service.get('product', 'N/A')}, Versión: {service.get('version', 'N/A')}\n")

            llm_summary = simulated_llm_call("summarize_service", service, port_id)
            if llm_summary.get("summary"):
                report_lines.append(f"    Resumen del LLM: {llm_summary['summary']}")
            if llm_summary.get("potential_vulnerabilities"):
                report_lines.append("    Vulnerabilidades Potenciales (sugeridas por LLM):")
                for vuln in llm_summary["potential_vulnerabilities"]:
                    report_lines.append(f"      - {vuln}")
            report_lines.append("")

            llm_steps = simulated_llm_call("suggest_pentest_steps", service, port_id)
            if llm_steps.get("recommended_steps"):
                report_lines.append("    Pasos de Pentesting Recomendados (sugeridos por LLM):")
                for step in llm_steps["recommended_steps"]:
                    report_lines.append(f"      - {step}")
            report_lines.append("")

            llm_questions = simulated_llm_call("generate_questions", service, port_id)
            if llm_questions.get("follow_up_questions"):
                report_lines.append("    Preguntas de Seguimiento para el LLM (sugeridas por LLM):")
                for q_template in llm_questions["follow_up_questions"]:
                    q = q_template.replace("X.Y.Z", service.get('version', 'X.Y.Z'))
                    q = q.replace("service X version Y", f"{service.get('name', 'service X')} version {service.get('version', 'Y')}")
                    report_lines.append(f"      - {q}")
            report_lines.append("") # Espacio después de cada puerto
        report_lines.append("") # Espacio después de cada host
    return "\n".join(report_lines)

if __name__ == "__main__":
    # Obtener el directorio donde se encuentra el script
    script_dir = os.path.dirname(os.path.abspath(__file__))

    # Definir rutas relativas al directorio del script
    input_xml_file = os.path.join(script_dir, "sample_nmap_input.xml")
    output_dir = script_dir # Guardar el reporte en el mismo directorio
    report_file_path = os.path.join(output_dir, "reporte_nmap_analizado.txt")

    # No es necesario crear output_dir si es el mismo que script_dir,
    # pero es buena práctica si fuera un subdirectorio.
    if not os.path.exists(output_dir):
        os.makedirs(output_dir)
        print(f"Directorio creado: {output_dir}")

    if not os.path.exists(input_xml_file):
        print(f"ERROR: El archivo de entrada '{input_xml_file}' no existe.")
        print("Por favor, crea este archivo con una salida Nmap XML válida (-oX) o usa el archivo de ejemplo proporcionado en el README.")
        # Crear un sample_nmap_input.xml vacío o con un ejemplo mínimo si no existe
        with open(input_xml_file, "w") as f_xml_sample:
            f_xml_sample.write("<?xml version='1.0' encoding='UTF-8'?>\n")
            f_xml_sample.write("<!DOCTYPE nmaprun>\n")
            f_xml_sample.write("<nmaprun args='nmap -oX - example.com'>\n")
            f_xml_sample.write("  <host><address addr='127.0.0.1' addrtype='ipv4'/><ports><port portid='80' protocol='tcp'><state state='open'/><service name='http'/></port></ports></host>\n")
            f_xml_sample.write("</nmaprun>\n")
        print(f"Se creó un archivo '{input_xml_file}' de ejemplo mínimo. Edítalo con una salida Nmap XML real o usa el ejemplo más completo del repo.")
        # No salir, intentar procesar el ejemplo mínimo

    with open(input_xml_file, "r") as f:
        nmap_xml_content = f.read()

    print(f"Procesando salida Nmap XML desde '{input_xml_file}'...")
    parsed_data = parse_nmap_xml(nmap_xml_content)

    if not parsed_data:
        print("No se pudieron parsear datos del XML. Verifique el formato del XML de entrada o si está vacío.")
    else:
        print("\nGenerando Reporte Asistido por LLM (Simulado)...")
        report_content = generate_analysis_report(parsed_data)

        print("\n--- INICIO DEL REPORTE ---")
        print(report_content)
        print("--- FIN DEL REPORTE ---")

        try:
            with open(report_file_path, "w") as f_report:
                f_report.write(f"Análisis de: {os.path.basename(input_xml_file)}\n\n") # Usar basename para el reporte
                f_report.write("Salida Nmap XML Original (para referencia):\n")
                f_report.write("-------------------------------------------\n")
                f_report.write(nmap_xml_content)
                f_report.write("\n\n==============================================\n")
                f_report.write("REPORTE ASISTIDO POR LLM (SIMULADO)\n")
                f_report.write("==============================================\n\n")
                f_report.write(report_content)
            print(f"\nReporte guardado en '{report_file_path}'")
        except IOError as e:
            print(f"Error al escribir el archivo de reporte: {e}")

    print("\nScript finalizado.")
